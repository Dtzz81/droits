name: Deploy Api to Dev

on:
  workflow_dispatch:
    inputs:
      environment:
        description: >
          The environment to which the application should be deployed.  Must be one of dev/staging/production
          and must match the terraform_workspace input.
        type: string
        required: true
      terraform_workspace:
        description: >
          The Terraform workspace to which infrastructure should be deployed.  Must be one of dev/staging/production and
          must match the environment input.
        type: string
        required: true
      version:
        description: The version of the artifacts/infrastructure to deploy.
        required: true
        type: string
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      aws_account_number:
        description: The account number in which infrastructure should be deployed
        required: true
      aws_session_token:
        required: true

jobs:
  deploy:
    name: Deploy Api to Dev
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        shell: bash
        working-directory: terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
      TF_WORKSPACE: ${{ inputs.terraform_workspace }}
      AWS_SESSION_TOKEN: ${{ secrets.aws_session_token }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.8
      - name: Terraform init
        run: terraform init 
      - name: Terraform validate
        run: terraform validate
      - name: Terraform deploy
        if: always() # Prevent terraform deploy from being interrupted and causing state lock issues
        env:
          TF_VAR_aws_account_number: ${{ secrets.aws_account_number }}
        run: terraform apply -input=false -auto-approve -var-file=${{ inputs.terraform_workspace }}.tfvars